exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 88
indent-width = 4
target-version = "py312"


[lint]
# select = ["E4", "E7", "E9", "F"] # Original Recommendation
# ignore = []


select = ["ALL"]

ignore = [
    # "F",      # Pyflakes
    #"E",      # Error
    #"W",      # Warning
    #"C90",    # mccabe
    #"I",      # isort
    #"N",      # pep8-naming
    #"D",      # pydocstyle
    #"UP",  # pyupgrade
    "YTT", # flake8-2020
    #"ANN",    # flake8-annotations
    #"ASYNC",  # flake8-async
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    #"COM",    # flake8-commas
    "CPY", # flake8-copyright
    #"C4",     # flake8-comprehensions
    #"DTZ",    # flake8-datetimez
    "T10", # flake8-debugger
    "DJ",  # flake8-django
    #"EM",     # flake8-errmsg
    "EXE", # flake8-executable
    #"FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    #"LOG",    # flake8-logging
    #"G",      # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    #"PT",     # flake8-pytest-style
    #"Q",      # flake8-quotes
    #"RSE",    # flake8-raise
    #"RET",    # flake8-return
    #"SLF",    # flake8-self
    "SLOT", # flake8-slots
    #"SIM",    # flake8-simplify
    #"TID",    # flake8-tidy-imports
    #"TC",     # flake8-type-checking
    #"INT",    # flake8-gettext
    #"ARG",    # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    # "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "C",   # Convention
    "R",   # Refactor
    #"TRY",    # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "FAST", # FastAPI
    "AIR",  # Airflow
    #"PERF",   # Perflint
    "FURB", # refurb
    #"DOC",    # pydoclint
    #"RUF",    # Ruff-specific rules


    # Recommend to ignore due to formatter:
    "W191",   # tab-indentation
    "E111",   # indentation-with-invalid-multiple
    "E114",   # indentation-with-invalid-multiple-comment
    "E117",   # over-indented
    "D206",   # indent-with-spaces
    "D300",   # triple-single-quotes
    "Q000",   # bad-quotes-inline-string
    "Q001",   # bad-quotes-multiline-string
    "Q002",   # bad-quotes-docstring
    "Q003",   # avoidable-escaped-quote
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    "ISC002", # multi-line-implicit-string-concatenation
    # Recommended to ignore:
    "C901",   # complexity check
    "D100",   # ignore missing docs
    "D101",   # missing docstring in public class
    "D102",   # missing docstring in public method
    "D103",   # missing docstring in public function
    "D104",   # missing docstring in public package
    "D105",   # missing docstring in magic method
    "D106",   # missing docstring in public nested class
    "D107",   # missing docstring in __init__
    "D200",   # one-line docstring should fit on one line
    "D203",   # one blank line before class docstring
    "D204",   # one blank line after class docstring
    "D205",   # blank line after docstring
    "D211",   # no blank lines allowed before class docstring
    "D212",   # multi-line docstring summary should start at first line
    "D400",   # first line should end with period
    "D401",   # first line should be in imperative mood
    "D406",   # section name should end with newline
    "D407",   # missing dashed underline after section
    "D415",   # first line should end with period, question mark, or exclamation
    "E266",   # too many leading '#' for block comment
    "E402",   # false positives for local imports
    "E501",   # line too long
    "FIX002", # too verbose descriptions of todos
    "TD002",  # missing author in TODO
    "TD003",  # missing issue link in TODO
    "TRY003", # external messages in exceptions are too verbose
    "RUF001", # ruff-specific rule


    #white space
    # "w293",
    # "w291",
]

fixable = ["ALL"]
unfixable = ["F401"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[lint.pydocstyle]
convention = "google"

[lint.pylint]
# Maximum number of arguments for function / method
max-args = 20
# Maximum number of boolean expressions in a if statement
max-bool-expr = 10
# Maximum number of branch for function / method body
max-branches = 100
# Maximum number of locals for function / method body
max-locals = 15
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5
# Maximum number of positional arguments allowed for a function or method definition
max-positional-args = 10
# Maximum number of public methods for a class (see R0904).
max-public-methods = 30
# Maximum number of return statements allowed for a function or method body
max-returns = 10
# Maximum number of statements in function / method body
max-statements = 1000


[lint.mccabe]
max-complexity = 10

[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
